// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BerlinClock.BerlinClockApi
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BerlinClockApiFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BerlinClockApi.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BerlinClockApi", "In order to avoid mistakes\r\nI check if the class BerlinClockApi works correctly\r\n" +
                    "In this feature, I check the different time events of all the 4 rows of the Berl" +
                    "in clock", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "BerlinClockApi")))
            {
                BerlinClock.BerlinClockApi.BerlinClockApiFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BerlinClockApi at 00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BerlinClockApi")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SystemTimeApi")]
        public virtual void BerlinClockApiAt0000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BerlinClockApi at 00:00", new string[] {
                        "SystemTimeApi"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I implement the class BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("I subscribe to the row events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I start the the the Berlin clock with the hour \"0\" and the minute \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4",
                        "Light5",
                        "Light6",
                        "Light7",
                        "Light8",
                        "Light9",
                        "Light10",
                        "Light11"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
#line 11
 testRunner.Then("the following lights on for the Berlin clock are", ((string)(null)), table1, "Then ");
#line 17
 testRunner.Given("I dispose the resources the BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BerlinClockApi at 11:36")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BerlinClockApi")]
        public virtual void BerlinClockApiAt1136()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BerlinClockApi at 11:36", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I implement the class BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.Given("I subscribe to the row events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("I start the the the Berlin clock with the hour \"11\" and the minute \"36\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4",
                        "Light5",
                        "Light6",
                        "Light7",
                        "Light8",
                        "Light9",
                        "Light10",
                        "Light11"});
            table2.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table2.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table2.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false"});
            table2.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
#line 23
 testRunner.Then("the following lights on for the Berlin clock are", ((string)(null)), table2, "Then ");
#line 29
 testRunner.Given("I dispose the resources the BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BerlinClockApi at 23:59")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BerlinClockApi")]
        public virtual void BerlinClockApiAt2359()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BerlinClockApi at 23:59", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I implement the class BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.Given("I subscribe to the row events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("I start the the the Berlin clock with the hour \"23\" and the minute \"59\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4",
                        "Light5",
                        "Light6",
                        "Light7",
                        "Light8",
                        "Light9",
                        "Light10",
                        "Light11"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "true"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
#line 35
 testRunner.Then("the following lights on for the Berlin clock are", ((string)(null)), table3, "Then ");
#line 41
 testRunner.Given("I dispose the resources the BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("BerlinClockApi at 24:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "BerlinClockApi")]
        public virtual void BerlinClockApiAt2400()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BerlinClockApi at 24:00", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I implement the class BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.Given("I subscribe to the row events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.When("I start the the the Berlin clock with the hour \"24\" and the minute \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4",
                        "Light5",
                        "Light6",
                        "Light7",
                        "Light8",
                        "Light9",
                        "Light10",
                        "Light11"});
            table4.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table4.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
            table4.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false",
                        "false"});
            table4.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A",
                        "#N/A"});
#line 47
 testRunner.Then("the following lights on for the Berlin clock are", ((string)(null)), table4, "Then ");
#line 53
 testRunner.Given("I dispose the resources the BerlinClockApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

