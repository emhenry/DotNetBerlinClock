// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BerlinClock.Rows
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Row1HourFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Row1Hour.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Row1Hour", "In order to avoid mistakes\r\nI check if the second row (RowOneHour) of the Berline" +
                    "r clock", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Row1Hour")))
            {
                BerlinClock.Rows.Row1HourFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Row1hour")]
        public virtual void RowOneHourAt0000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 00:00", new string[] {
                        "Row1hour"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
testRunner.When("the hour for RowOnehours is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 10
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 01:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0100()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 01:00", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
testRunner.When("the hour for RowOnehours is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table2.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 17
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 02:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0200()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 02:00", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
testRunner.When("the hour for RowOnehours is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 24
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 03:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0300()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 03:00", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
testRunner.When("the hour for RowOnehours is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table4.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 31
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 04:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0400()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 04:00", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
testRunner.When("the hour for RowOnehours is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table5.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 38
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 05:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0500()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 05:00", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
testRunner.When("the hour for RowOnehours is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table6.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 45
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 06:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0600()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 06:00", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
testRunner.When("the hour for RowOnehours is \"6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table7.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 52
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 07:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0700()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 07:00", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
testRunner.When("the hour for RowOnehours is \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table8.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 59
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 08:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0800()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 08:00", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
testRunner.When("the hour for RowOnehours is \"8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table9.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 66
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 09:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt0900()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 09:00", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
testRunner.When("the hour for RowOnehours is \"9\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table10.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 73
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 10:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 10:00", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
testRunner.When("the hour for RowOnehours is \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table11.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 80
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 11:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1100()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 11:00", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
testRunner.When("the hour for RowOnehours is \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table12.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 87
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 12:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1200()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 12:00", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
testRunner.When("the hour for RowOnehours is \"12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table13.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 94
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 13:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1300()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 13:00", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
testRunner.When("the hour for RowOnehours is \"13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table14.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 101
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 14:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1400()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 14:00", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
testRunner.When("the hour for RowOnehours is \"14\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table15.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 108
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 15:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1500()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 15:00", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
testRunner.When("the hour for RowOnehours is \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table16.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 116
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 16:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1600()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 16:00", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
testRunner.When("the hour for RowOnehours is \"16\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table17.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 123
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 17:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1700()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 17:00", ((string[])(null)));
#line 127
this.ScenarioSetup(scenarioInfo);
#line 128
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
testRunner.When("the hour for RowOnehours is \"17\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table18.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 130
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 18:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1800()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 18:00", ((string[])(null)));
#line 134
this.ScenarioSetup(scenarioInfo);
#line 135
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
testRunner.When("the hour for RowOnehours is \"18\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table19.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 137
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 19:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt1900()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 19:00", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
testRunner.When("the hour for RowOnehours is \"19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table20.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 144
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 20:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt2000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 20:00", ((string[])(null)));
#line 149
this.ScenarioSetup(scenarioInfo);
#line 150
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
testRunner.When("the hour for RowOnehours is \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table21.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 152
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 21:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt2100()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 21:00", ((string[])(null)));
#line 156
this.ScenarioSetup(scenarioInfo);
#line 157
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 158
testRunner.When("the hour for RowOnehours is \"21\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table22.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 159
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 22:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt2200()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 22:00", ((string[])(null)));
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
testRunner.When("the hour for RowOnehours is \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table23.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 166
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 23:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt2300()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 23:00", ((string[])(null)));
#line 170
this.ScenarioSetup(scenarioInfo);
#line 171
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
testRunner.When("the hour for RowOnehours is \"23\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table24.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 173
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneHour at 24:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Hour")]
        public virtual void RowOneHourAt2400()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneHour at 24:00", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line 178
testRunner.Given("I implement the second row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 179
testRunner.When("the hour for RowOnehours is \"24\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table25.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 180
testRunner.Then("the following values for RowOnehours are valid", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

