// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BerlinClock.Rows
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Row1MinuteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Row1Minute.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Row1Minute", "In order to avoid mistakes\r\nI check the fourth row (RowOneMinute) of the Berliner" +
                    " clock", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Row1Minute")))
            {
                BerlinClock.Rows.Row1MinuteFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Row1minute")]
        public virtual void RowOneMinuteAt0000()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:00", new string[] {
                        "Row1minute"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("the minute for RowOneMinute is \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 9
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0001()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:01", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("the minute for RowOneMinute is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table2.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 16
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0002()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:02", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("the minute for RowOneMinute is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 23
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0003()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:03", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("the minute for RowOneMinute is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table4.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 30
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0004()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:04", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("the minute for RowOneMinute is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table5.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 37
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0005()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:05", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("the minute for RowOneMinute is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table6.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 44
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0006()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:06", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("the minute for RowOneMinute is \"6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table7.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 51
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:07")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0007()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:07", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("the minute for RowOneMinute is \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table8.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 58
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:08")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0008()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:08", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When("the minute for RowOneMinute is \"8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table9.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 65
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:09")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0009()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:09", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.When("the minute for RowOneMinute is \"9\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table10.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 72
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0010()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:10", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.When("the minute for RowOneMinute is \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table11.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 79
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0011()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:11", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.When("the minute for RowOneMinute is \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table12.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 86
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0012()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:12", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
 testRunner.When("the minute for RowOneMinute is \"12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table13.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 93
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0013()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:13", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
 testRunner.When("the minute for RowOneMinute is \"13\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table14.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 100
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0014()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:14", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
 testRunner.When("the minute for RowOneMinute is \"14\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table15.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 107
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0015()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:15", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
 testRunner.When("the minute for RowOneMinute is \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table16.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 114
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0016()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:16", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("the minute for RowOneMinute is \"16\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table17.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 121
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0017()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:17", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
 testRunner.When("the minute for RowOneMinute is \"17\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table18.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 128
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0018()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:18", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
 testRunner.When("the minute for RowOneMinute is \"18\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table19.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 135
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0019()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:19", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 140
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
 testRunner.When("the minute for RowOneMinute is \"19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table20.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 142
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0020()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:20", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.When("the minute for RowOneMinute is \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table21.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 149
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0021()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:21", ((string[])(null)));
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.When("the minute for RowOneMinute is \"21\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table22.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 156
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0022()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:22", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
 testRunner.When("the minute for RowOneMinute is \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table23.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 163
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:23")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0023()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:23", ((string[])(null)));
#line 167
this.ScenarioSetup(scenarioInfo);
#line 168
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
 testRunner.When("the minute for RowOneMinute is \"23\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table24.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 170
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:24")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0024()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:24", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
 testRunner.When("the minute for RowOneMinute is \"24\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table25.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 177
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:25")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0025()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:25", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
 testRunner.When("the minute for RowOneMinute is \"25\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table26.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 184
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:26")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0026()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:26", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 189
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 190
 testRunner.When("the minute for RowOneMinute is \"26\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table27.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 191
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0027()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:27", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 197
 testRunner.When("the minute for RowOneMinute is \"27\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table28.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 198
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:28")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0028()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:28", ((string[])(null)));
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.When("the minute for RowOneMinute is \"28\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table29.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 205
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table29, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:29")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0029()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:29", ((string[])(null)));
#line 209
this.ScenarioSetup(scenarioInfo);
#line 210
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 211
 testRunner.When("the minute for RowOneMinute is \"29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table30.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 212
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0030()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:30", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.When("the minute for RowOneMinute is \"30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table31.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 219
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:31")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0031()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:31", ((string[])(null)));
#line 223
this.ScenarioSetup(scenarioInfo);
#line 224
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 225
 testRunner.When("the minute for RowOneMinute is \"31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table32.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 226
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:32")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0032()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:32", ((string[])(null)));
#line 230
this.ScenarioSetup(scenarioInfo);
#line 231
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 232
 testRunner.When("the minute for RowOneMinute is \"32\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table33.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 233
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table33, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:33")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0033()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:33", ((string[])(null)));
#line 237
this.ScenarioSetup(scenarioInfo);
#line 238
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
 testRunner.When("the minute for RowOneMinute is \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table34.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 240
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0034()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:34", ((string[])(null)));
#line 244
this.ScenarioSetup(scenarioInfo);
#line 245
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 246
 testRunner.When("the minute for RowOneMinute is \"34\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table35.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 247
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table35, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:35")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0035()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:35", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
 testRunner.When("the minute for RowOneMinute is \"35\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table36.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 254
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table36, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:36")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0036()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:36", ((string[])(null)));
#line 258
this.ScenarioSetup(scenarioInfo);
#line 259
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
 testRunner.When("the minute for RowOneMinute is \"36\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table37.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 261
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:37")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0037()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:37", ((string[])(null)));
#line 265
this.ScenarioSetup(scenarioInfo);
#line 266
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 267
 testRunner.When("the minute for RowOneMinute is \"37\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table38.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 268
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:38")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0038()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:38", ((string[])(null)));
#line 272
this.ScenarioSetup(scenarioInfo);
#line 273
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 274
 testRunner.When("the minute for RowOneMinute is \"38\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table39.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 275
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table39, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:39")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0039()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:39", ((string[])(null)));
#line 279
this.ScenarioSetup(scenarioInfo);
#line 280
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 281
 testRunner.When("the minute for RowOneMinute is \"39\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table40.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 282
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table40, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:40")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0040()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:40", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line 287
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 288
 testRunner.When("the minute for RowOneMinute is \"40\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table41.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 289
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table41, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:41")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0041()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:41", ((string[])(null)));
#line 293
this.ScenarioSetup(scenarioInfo);
#line 294
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
 testRunner.When("the minute for RowOneMinute is \"41\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table42.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 296
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table42, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:42")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:42", ((string[])(null)));
#line 300
this.ScenarioSetup(scenarioInfo);
#line 301
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 302
 testRunner.When("the minute for RowOneMinute is \"42\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table43.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 303
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table43, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:43")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0043()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:43", ((string[])(null)));
#line 307
this.ScenarioSetup(scenarioInfo);
#line 308
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
 testRunner.When("the minute for RowOneMinute is \"43\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table44.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 310
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table44, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0044()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:44", ((string[])(null)));
#line 314
this.ScenarioSetup(scenarioInfo);
#line 315
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
 testRunner.When("the minute for RowOneMinute is \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table45.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 317
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table45, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:45")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0045()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:45", ((string[])(null)));
#line 321
this.ScenarioSetup(scenarioInfo);
#line 322
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 323
 testRunner.When("the minute for RowOneMinute is \"45\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table46.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 324
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table46, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:46")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0046()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:46", ((string[])(null)));
#line 328
this.ScenarioSetup(scenarioInfo);
#line 329
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 330
 testRunner.When("the minute for RowOneMinute is \"46\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table47.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 331
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table47, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:47")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0047()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:47", ((string[])(null)));
#line 335
this.ScenarioSetup(scenarioInfo);
#line 336
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 337
 testRunner.When("the minute for RowOneMinute is \"47\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table48.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 338
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table48, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:48")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0048()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:48", ((string[])(null)));
#line 342
this.ScenarioSetup(scenarioInfo);
#line 343
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 344
 testRunner.When("the minute for RowOneMinute is \"48\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table49.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 345
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table49, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:49")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0049()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:49", ((string[])(null)));
#line 349
this.ScenarioSetup(scenarioInfo);
#line 350
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 351
 testRunner.When("the minute for RowOneMinute is \"49\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table50.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 352
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table50, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:50")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0050()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:50", ((string[])(null)));
#line 356
this.ScenarioSetup(scenarioInfo);
#line 357
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
 testRunner.When("the minute for RowOneMinute is \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table51.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 359
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table51, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:51")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0051()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:51", ((string[])(null)));
#line 363
this.ScenarioSetup(scenarioInfo);
#line 364
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 365
 testRunner.When("the minute for RowOneMinute is \"51\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table52.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 366
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table52, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:52")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0052()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:52", ((string[])(null)));
#line 370
this.ScenarioSetup(scenarioInfo);
#line 371
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 372
 testRunner.When("the minute for RowOneMinute is \"52\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table53.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 373
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table53, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:53")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0053()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:53", ((string[])(null)));
#line 377
this.ScenarioSetup(scenarioInfo);
#line 378
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 379
 testRunner.When("the minute for RowOneMinute is \"53\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table54.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 380
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table54, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:54")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0054()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:54", ((string[])(null)));
#line 384
this.ScenarioSetup(scenarioInfo);
#line 385
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 386
 testRunner.When("the minute for RowOneMinute is \"54\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table55.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 387
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table55, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:55")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0055()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:55", ((string[])(null)));
#line 391
this.ScenarioSetup(scenarioInfo);
#line 392
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 393
 testRunner.When("the minute for RowOneMinute is \"55\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table56.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "false"});
#line 394
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table56, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:56")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0056()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:56", ((string[])(null)));
#line 398
this.ScenarioSetup(scenarioInfo);
#line 399
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 400
 testRunner.When("the minute for RowOneMinute is \"56\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table57.AddRow(new string[] {
                        "true",
                        "false",
                        "false",
                        "false"});
#line 401
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table57, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:57")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0057()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:57", ((string[])(null)));
#line 405
this.ScenarioSetup(scenarioInfo);
#line 406
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 407
 testRunner.When("the minute for RowOneMinute is \"57\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table58.AddRow(new string[] {
                        "true",
                        "true",
                        "false",
                        "false"});
#line 408
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table58, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:58")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0058()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:58", ((string[])(null)));
#line 412
this.ScenarioSetup(scenarioInfo);
#line 413
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 414
 testRunner.When("the minute for RowOneMinute is \"58\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table59.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false"});
#line 415
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table59, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RowOneMinute at 00:59")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Row1Minute")]
        public virtual void RowOneMinuteAt0059()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RowOneMinute at 00:59", ((string[])(null)));
#line 419
this.ScenarioSetup(scenarioInfo);
#line 420
 testRunner.Given("I implement the fourth row of the Berlin clock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 421
 testRunner.When("the minute for RowOneMinute is \"59\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Light1",
                        "Light2",
                        "Light3",
                        "Light4"});
            table60.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "true"});
#line 422
 testRunner.Then("the following values for RowOneMinute are valid", ((string)(null)), table60, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

